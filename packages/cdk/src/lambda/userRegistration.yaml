serverless:
  UserRegistrationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/lambda/userRegistration.handler
      Runtime: nodejs20.x
      CodeUri: .
      Environment:
        Variables:
          REDIS_ENDPOINT: host.docker.internal
          REDIS_PORT: "63790"
          COGNITO_USER_POOL_ID: us-west-2_Onci94rlj
      Events:
        UserRegistration:
          Type: Api
          Properties:
            Path: /student/register
            Method: post

openapi:
  paths:
    /student/register:
      post:
        summary: Register a student
        description: Registers a student after verification code validation and returns authentication tokens.
        requestBody:
          description: The username and password for the student registration
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: The desired username for the new student.
                  password:
                    type: string
                    description: The desired password for the new student.
        parameters:
          - name: email
            in: query
            required: true
            description: The email address of the student.
            schema:
              type: string
          - name: verificationCode
            in: query
            required: true
            description: The verification code sent to the student's email.
            schema:
              type: string
        responses:
          '200':
            description: Student successfully registered and tokens returned
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "User successfully created"
                    accessToken:
                      type: string
                      description: Access token for API authorization
                    idToken:
                      type: string
                      description: ID token for user identification
                    refreshToken:
                      type: string
                      description: Token used to refresh the access token
          '400':
            description: Bad request - missing or invalid parameters
          '500':
            description: Internal server error