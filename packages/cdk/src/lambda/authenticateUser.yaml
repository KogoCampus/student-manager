serverless:
  Resources:
    AuthenticateUserFunction:
      Type: AWS::Serverless::Function
      Properties:
        Handler: lambda/authenticateUser.handler
        Runtime: nodejs20.x
        CodeUri: .
        Environment:
          Variables:
            COGNITO_USER_POOL_ID:
            COGNITO_CLIENT_ID:
        Events:
          AuthenticateUserApi:
            Type: Api
            Properties:
              Path: /student/authenticate
              Method: get

openapi:
  paths:
    /student/authenticate:
      get:
        summary: Authenticate user with either access_token or refresh_token
        description: Authenticate a user using an access token or refresh the access token using a refresh token.
        parameters:
          - name: Authorization
            in: header
            required: true
            description: Bearer token (access token or refresh token) for authentication.
            schema:
              type: string
          - name: grant_type
            in: query
            required: true
            description: The grant type, either access_token or refresh_token.
            schema:
              type: string
              enum: [access_token, refresh_token]
        responses:
          '200':
            description: User authenticated successfully or access token refreshed
            content:
              application/json:
                schema:
                  type: object
                  description: Response when grant_type is refresh_token
                  properties:
                    userdata:
                      type: object
                      properties:
                        username:
                          type: string
                          example: "johndoe"
                        email:
                          type: string
                          example: "johndoe@example.com"
                        schoolInfo:
                          type: object
                          description: School information of the user
                          properties:
                            domain:
                              type: string
                              example: "@sfu.ca"
                            name:
                              type: string
                              example: "Simon Fraser University"
                            shortenedName:
                              type: string
                              example: "sfu"
                    access_token:
                      type: string
                      description: New access token
                      example: "newAccessToken"
                    message:
                      type: string
                      example: "Access token refreshed successfully"
          '400':
            description: Bad request - missing or invalid parameters
          '500':
            description: Internal server error